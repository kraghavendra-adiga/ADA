class Pair implements Comparable<Pair>{
    int freq;
    int val;
    Pair(int val, int freq){
        this.freq = freq;
        this.val = val;
    }

    @Override
    public int compareTo(Pair o) {
        return this.freq - o.freq;
    }
}

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        HashMap<Integer,Integer> map = new HashMap<>();
        int[] arr = new int[k];
        int i=0;
        for(var el: nums){
            if(map.containsKey(el)) map.put(el,map.get(el)+1);
            else map.put(el,1);
        }

        for(var el: map.keySet()){
            Pair p = new Pair(el, map.get(el));
            pq.add(p);
            if(pq.size()>k) pq.poll();
        }
        while(!pq.isEmpty()){
            Pair temp = pq.poll();
            arr[i++] = temp.val;
        }
        return arr;
    }
}